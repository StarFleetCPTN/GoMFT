package list

import (
	"context"
	"fmt"
	"strconv"
	"github.com/starfleetcptn/gomft/components/file_metadata"
)

// FileMetadataListPartial renders the list of file metadata in a table format
templ FileMetadataListPartial(ctx context.Context, data file_metadata.FileMetadataListData) {
	<!-- Delete Dialog -->
	<div id="delete-dialog" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
		<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
			<div class="mt-3 text-center">
				<h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Delete File</h3>
				<div class="mt-2 px-7 py-3">
					<p class="text-sm text-gray-500 dark:text-gray-400">
						Are you sure you want to delete this file? This action cannot be undone.
					</p>
				</div>
				<div class="items-center px-4 py-3">
					<button id="confirm-delete" class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
						Delete
					</button>
				</div>
				<div class="items-center px-4 py-3">
					<button onclick="closeModal('delete-dialog')" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500">
						Cancel
					</button>
				</div>
			</div>
		</div>
	</div>

	<!-- File List Table -->
	<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
		<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
			<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
				<tr>
					<th scope="col" class="px-6 py-3">ID</th>
					<th scope="col" class="px-6 py-3">Filename</th>
					<th scope="col" class="px-6 py-3">Size</th>
					<th scope="col" class="px-6 py-3">Processed time</th>
					<th scope="col" class="px-6 py-3">Status</th>
					if data.Job != nil {
						<th scope="col" class="px-6 py-3">Job</th>
					}
					<th scope="col" class="px-6 py-3">Actions</th>
				</tr>
			</thead>
			<tbody>
				for _, file := range data.Files {
					<tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
						<td class="px-6 py-4 font-medium text-gray-900 dark:text-white">
							{ strconv.FormatInt(int64(file.ID), 10) }
						</td>
						<td class="px-6 py-4">
							<a href={ templ.SafeURL(fmt.Sprintf("/files/%d", file.ID)) } class="font-medium text-blue-600 dark:text-blue-500 hover:underline">
								{ file.FileName }
							</a>
						</td>
						<td class="px-6 py-4">
							{ strconv.FormatInt(file.FileSize, 10) } bytes
						</td>
						<td class="px-6 py-4">
							{ file.ProcessedTime.Format("2006-01-02 15:04:05") }
						</td>
						<td class="px-6 py-4">
							<span class={ fmt.Sprintf("px-2 py-1 text-xs font-medium rounded-full %s", getStatusClass(file.Status)) }>
								{ file.Status }
							</span>
						</td>
						if data.Job != nil {
							<td class="px-6 py-4">
								<a href={ templ.SafeURL(fmt.Sprintf("/jobs/%d", data.Job.ID)) } class="font-medium text-blue-600 dark:text-blue-500 hover:underline">
									{ data.Job.Name }
								</a>
							</td>
						}
						<td class="px-6 py-4">
							<div class="flex items-center space-x-3">
								<a href={ templ.SafeURL(fmt.Sprintf("/files/%d", file.ID)) } class="font-medium text-blue-600 dark:text-blue-500 hover:underline">
									<i class="fas fa-eye"></i>
								</a>
								<button onclick="showModal('delete-dialog')" data-file-id={ strconv.FormatInt(int64(file.ID), 10) } class="font-medium text-red-600 dark:text-red-500 hover:underline">
									<i class="fas fa-trash"></i>
								</button>
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	<!-- Pagination -->
	if data.TotalPages > 1 {
		<div class="flex items-center justify-between pt-4">
			<div class="flex items-center">
				<span class="text-sm text-gray-700 dark:text-gray-400">
					Showing { strconv.FormatInt(int64((data.Page - 1) * data.Limit + 1), 10) } to { strconv.FormatInt(int64(min(data.Page * data.Limit, int(data.TotalCount))), 10) } of { strconv.FormatInt(data.TotalCount, 10) } files
				</span>
			</div>
			<div class="flex items-center space-x-2">
				if data.Page > 1 {
					<a href={ templ.SafeURL(fmt.Sprintf("/files?page=%d", data.Page - 1)) } class="px-3 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:bg-gray-700">
						Previous
					</a>
				}
				if data.Page < data.TotalPages {
					<a href={ templ.SafeURL(fmt.Sprintf("/files?page=%d", data.Page + 1)) } class="px-3 py-1 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:bg-gray-700">
						Next
					</a>
				}
			</div>
		</div>
	}
}

// getStatusClass returns the appropriate Tailwind CSS class for the given status
func getStatusClass(status string) string {
	switch status {
	case "processed":
		return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"
	case "archived":
		return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300"
	case "deleted":
		return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300"
	case "archived_and_deleted":
		return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300"
	case "error":
		return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300"
	default:
		return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300"
	}
} 