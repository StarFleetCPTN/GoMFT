package details

import (
	"context"
	"fmt"
	"strconv"
	"github.com/starfleetcptn/gomft/components/file_metadata"
	"github.com/starfleetcptn/gomft/components/file_metadata/utils"
	"github.com/starfleetcptn/gomft/components/layout"
)

// FileMetadataDetails renders the details view for a file metadata
templ FileMetadataDetails(ctx context.Context, data file_metadata.FileMetadataDetailsData) {
	@layout.LayoutWithContext("File Details", ctx) {
		<!-- Status and Error Messages -->
		<div id="toast-container" class="fixed top-5 right-5 z-50 flex flex-col gap-2"></div>
		
		@utils.fileMetadataJS()
		
		<div id="details-container" style="min-height: 100vh;" class="bg-gray-50 dark:bg-gray-900">
			<div class="pb-8 w-full">
				<div class="mb-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
					<h1 class="text-2xl font-bold text-gray-900 dark:text-white flex items-center">
						<i class="fas fa-file-alt w-6 h-6 mr-2 text-blue-500"></i>
						File Details
					</h1>
					<div class="flex gap-3">
						<a href="/files" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
							<i class="fas fa-arrow-left mr-2"></i> Back to Files
						</a>
					</div>
				</div>
				
				<div class="bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-full">
					<!-- Card header -->
					<div class="p-4 md:p-5 border-b border-gray-200 dark:border-gray-700">
						<h5 class="text-xl font-bold leading-none text-gray-900 dark:text-white">
							File Information
						</h5>
						<p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
							ID: { strconv.FormatInt(int64(data.File.ID), 10) }
						</p>
					</div>
					
					<!-- Card content -->
					<div class="p-4 md:p-5">
						<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
							<!-- File Information -->
							<div>
								<h6 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">File Information</h6>
								<dl class="grid grid-cols-1 gap-4">
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Filename</dt>
										<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ data.File.FileName }</dd>
									</div>
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Size</dt>
										<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ strconv.FormatInt(data.File.FileSize, 10) } bytes</dd>
									</div>
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Hash</dt>
										<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ data.File.FileHash }</dd>
									</div>
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Status</dt>
										<dd class="mt-1">
											<span class={ fmt.Sprintf("px-2 py-1 text-xs font-medium rounded-full %s", getStatusClass(data.File.Status)) }>
												{ data.File.Status }
											</span>
										</dd>
									</div>
								</dl>
							</div>
							
							<!-- Processing Information -->
							<div>
								<h6 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Processing Information</h6>
								<dl class="grid grid-cols-1 gap-4">
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Original Path</dt>
										<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ data.File.OriginalPath }</dd>
									</div>
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Destination Path</dt>
										<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ data.File.DestinationPath }</dd>
									</div>
									<div>
										<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Processed At</dt>
										<dd class="mt-1 text-sm text-gray-900 dark:text-white">{ data.File.ProcessedTime.Format("2006-01-02 15:04:05") }</dd>
									</div>
									if data.File.Status == "error" && data.File.ErrorMessage != "" {
										<div>
											<dt class="text-sm font-medium text-gray-500 dark:text-gray-400">Error</dt>
											<dd class="mt-1 text-sm text-red-600 dark:text-red-400">{ data.File.ErrorMessage }</dd>
										</div>
									}
								</dl>
							</div>
						</div>
						
						<!-- Actions -->
						<div class="mt-6 flex justify-end space-x-3">
							<button onclick="showModal('delete-dialog')" class="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-red-600 dark:hover:bg-red-700 focus:outline-none dark:focus:ring-red-800">
								<i class="fas fa-trash mr-2"></i> Delete File
							</button>
						</div>
					</div>
				</div>
			</div>

			<!-- Delete Dialog -->
			<div id="delete-dialog" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
				<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
					<div class="mt-3 text-center">
						<h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white">Delete File</h3>
						<div class="mt-2 px-7 py-3">
							<p class="text-sm text-gray-500 dark:text-gray-400">
								Are you sure you want to delete this file? This action cannot be undone.
							</p>
						</div>
						<div class="items-center px-4 py-3">
							<button id="confirm-delete" data-file-id={ strconv.FormatInt(int64(data.File.ID), 10) } class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
								Delete
							</button>
						</div>
						<div class="items-center px-4 py-3">
							<button onclick="closeModal('delete-dialog')" class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-500">
								Cancel
							</button>
						</div>
					</div>
				</div>
			</div>

			<script>
				// Set dark background color if in dark mode
				if (document.documentElement.classList.contains('dark')) {
					document.getElementById('details-container').style.backgroundColor = '#111827';
				}
				
				// Add event listener for theme changes
				document.addEventListener('DOMContentLoaded', function() {
					const themeToggle = document.getElementById('theme-toggle');
					if (themeToggle) {
						themeToggle.addEventListener('click', function() {
							setTimeout(function() {
								const isDark = document.documentElement.classList.contains('dark');
								document.getElementById('details-container').style.backgroundColor = isDark ? '#111827' : 'rgb(249, 250, 251)';
							}, 50);
						});
					}
				});
			</script>
		</div>
	}
}

// getStatusClass returns the appropriate Tailwind CSS class for the given status
func getStatusClass(status string) string {
	switch status {
	case "processed":
		return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"
	case "archived":
		return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300"
	case "deleted":
		return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300"
	case "archived_and_deleted":
		return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300"
	case "error":
		return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300"
	default:
		return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300"
	}
} 